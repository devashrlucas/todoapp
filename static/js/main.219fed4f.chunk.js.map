{"version":3,"sources":["components/Header.js","components/AddForm.js","components/List.js","components/App.js","tests/serviceWorker.js","index.js"],"names":["Header","props","number","AddForm","newTodo","useState","text","setText","onSubmit","event","preventDefault","target","reset","type","name","placeholder","onChange","value","List","tasks","deleteTask","map","task","id","key","toString","onClick","App","setTasks","className","length","taskid","newTasks","filter","_","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAWeA,G,MARA,SAACC,GACd,OACE,6BACE,+CAAqBA,EAAMC,OAA3B,eCqBSC,G,MAxBC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACPC,mBAAS,IADF,mBACxBC,EADwB,KAClBC,EADkB,KAG/B,OACE,0BACEC,SAAU,SAACC,GACTA,EAAMC,iBACNN,EAAQE,GACRG,EAAME,OAAOC,UAGf,2BACEC,KAAK,OACLC,KAAK,MACLC,YAAY,WACZC,SAAU,SAACP,GACTF,EAAQE,EAAME,OAAOM,QAEvBX,KAAMA,OCFCY,G,MAhBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,WAAV,OACX,4BACGD,EAAME,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,EAAGE,WAAYnB,KAAMgB,GAC5B,2BACET,KAAK,WACLa,QAAS,WACPN,EAAWG,MAGdD,S,MCeMK,MAtBf,WAAgB,IAAD,EACatB,mBAAS,IADtB,mBACNc,EADM,KACCS,EADD,KAGb,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CAAQ3B,OAAQiB,EAAMW,SACtB,kBAAC,EAAD,CACE1B,QAAS,SAACE,GACRsB,EAAS,GAAD,mBAAKT,GAAL,CAAYb,QAGxB,kBAAC,EAAD,CACEa,MAAOA,EACPC,WAAY,SAACW,GACX,IAAMC,EAAWb,EAAMc,QAAO,SAACC,EAAGX,GAAJ,OAAWA,IAAOQ,KAChDH,EAASI,QCTCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.219fed4f.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Header.css';\n\nconst Header = (props) => {\n  return (\n    <div>\n      <h1> You have added {props.number} Todos. </h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState }  from 'react';\nimport '../styles/AddForm.css';\n\nconst AddForm = ({ newTodo }) => {\n  const [text, setText] = useState(\"\");\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        newTodo(text);\n        event.target.reset();\n      }}\n    >\n      <input\n        type=\"text\"\n        name=\"new\"\n        placeholder=\"Add todo\"\n        onChange={(event) => {\n          setText(event.target.value);\n        }}\n        text={text}\n      ></input>\n    </form>\n  );\n};\n\nexport default AddForm;","import React from 'react';\nimport '../styles/List.css';\n\nconst List = ({ tasks, deleteTask }) => (\n  <ul>\n    {tasks.map((task, id) => (\n      <li key={id.toString()} text={task}>\n        <input\n          type=\"checkbox\"\n          onClick={() => {\n            deleteTask(id);\n          }}\n        ></input>\n        {task}\n      </li>\n    ))}\n  </ul>\n);\n\nexport default List;","import React, { useState } from 'react';\nimport Header from \"./Header\";\nimport AddForm from './AddForm';\nimport List from './List';\nimport '../styles/App.css';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <Header number={tasks.length} />\n      <AddForm\n        newTodo={(text) => {\n          setTasks([...tasks, text]);\n        }}\n      />\n      <List\n        tasks={tasks}\n        deleteTask={(taskid) => {\n          const newTasks = tasks.filter((_, id) => id !== taskid);\n          setTasks(newTasks);\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './tests/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}